# -*- mode: ruby -*-
# vi: set ft=ruby ts=2 sw=2 :

require 'yaml'
require 'pathname'

if File.exist?('custom-config.yaml')
  test_conf = YAML.load_file('custom-config.yaml')
else
  test_conf = YAML.load_file('default-config.yaml')
end
src_dir = test_conf["srcdir"]

clara_nodes = { :platform => "10.11.1.100",
                :dpe1 => "10.11.1.101",
                :dpe2 => "10.11.1.102",
              }


Vagrant.require_version ">= 1.4"

Vagrant.configure("2") do |config|

  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :box
  end

  clara_nodes.each do | node_name, node_ip |
    config.vm.define node_name do | node_config |

      node_config.vm.box = "ubuntu/trusty64"
      node_config.vm.hostname = node_name.to_s
      node_config.vm.network :private_network, ip: node_ip

      dev_dir = "/home/vagrant/clara/dev"
      node_config.vm.synced_folder src_dir, dev_dir

      node_config.vm.provision :shell, :path => "provision/apt-update.sh"

      node_config.vm.provision :puppet do | puppet |
        puppet.manifests_path = "provision/manifests"
        puppet.manifest_file = "default.pp"
        puppet.module_path = "provision/modules"
        puppet.options = "--verbose --debug"
      end


      ["xmsg", "clara"].each do | project |
        project_conf = test_conf[project]
        ["java", "cpp", "python", "webapp"].each do | project_version |
          if project_conf.key?(project_version)
            version_conf = project_conf[project_version]
            version_srcdir = src_dir + "/" + version_conf["path"]
            if version_conf.key?("provision") && File.directory?(version_srcdir)
              script = "cd #{dev_dir}/#{version_conf["path"]}"
              version_conf["provision"].each do | command |
                script += "\n#{command}"
              end
              if project_version != "webapp" or node_name.to_s == "platform"
                node_config.vm.provision "shell", inline: script, privileged: false
              end
            end
          end
        end
      end

    end
  end
end
