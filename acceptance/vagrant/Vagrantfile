# -*- mode: ruby -*-
# vi: set ft=ruby ts=2 sw=2 :

require 'yaml'
require 'pathname'

if File.exist?('../custom-config.yaml')
  test_conf = YAML.load_file('../custom-config.yaml')
else
  test_conf = YAML.load_file('../default-config.yaml')
end
clara_conf = test_conf["clara"]

clara_src = clara_conf["srcdir"]
if not (Pathname.new clara_src).absolute?
  clara_src = "../" + clara_src
end

clara_nodes = { :platform => "10.11.1.100",
                :dpe1 => "10.11.1.101",
                :dpe2 => "10.11.1.102",
              }


Vagrant.require_version ">= 1.4"

Vagrant.configure("2") do |config|

  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :box
  end

  clara_nodes.each do | node_name, node_ip |
    config.vm.define node_name do | node_config |

      node_config.vm.box = "ubuntu/trusty64"
      node_config.vm.hostname = node_name.to_s
      node_config.vm.network :private_network, ip: node_ip

      base_dir = "/home/vagrant/clara"
      node_config.vm.synced_folder "../services", "#{base_dir}/services", create: true
      node_config.vm.synced_folder "../log", "#{base_dir}/log", create: true
      node_config.vm.synced_folder clara_src, "#{base_dir}/src"

      # node_config.vm.provision :shell, :inline => "sudo apt-get update"
      node_config.vm.provision :puppet do | puppet |
        puppet.manifests_path = "provision/manifests"
        puppet.manifest_file = "default.pp"
        puppet.module_path = "provision/modules"
        puppet.options = "--verbose --debug"
      end

      ["java", "cpp", "python", "webapp"].each do | clara_version |
        if clara_conf.key?(clara_version)
          version_conf = clara_conf[clara_version]
          version_srcdir = clara_src + "/" + version_conf["path"]
          if version_conf.key?("provision") && File.directory?(version_srcdir)
            script = "cd #{base_dir}/src/#{version_conf["path"]}"
            version_conf["provision"].each do | command |
              script += "\n#{command}"
            end
            if clara_version != "webapp" or node_name.to_s == "platform"
              node_config.vm.provision "shell", inline: script, privileged: false
            end
          end
        end
      end

      if node_name.to_s == "platform"
        node_config.vm.network "forwarded_port", guest: 7771, host: 7771
        node_config.vm.network "forwarded_port", guest: 7772, host: 7772
        node_config.vm.network "forwarded_port", guest: 3000, host: 13000
      end

    end
  end
end
