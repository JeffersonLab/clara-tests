#!/usr/bin/env bash

##############################################################################
# Helper functions
##############################################################################

TEST_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TMUX="tmux"
SESSION=TEST

source $TEST_DIR/lib/common-utils

##############################################################################
# Check the plaftorm
##############################################################################

check_tmux
get_fe_host

##############################################################################
# Options
##############################################################################

function usage()
{
    echo -e "Usage:"
    echo -e "\t$0 [ -f <nodes_file> ] [ -s <first_node> ] <num_nodes>"
}


FIRST_NODE=1
KEEP_DETACHED=1
MONITOR=1
while getopts "hds:f:a:m" OPTION
do
    case $OPTION in
        h)
            usage; exit 0 ;;
        d)
            KEEP_DETACHED=0 ;;
        m)
            MONITOR=0 ;;
        s)
            FIRST_NODE=$OPTARG ;;
        f)
            NODES_FILE=$OPTARG ;;
        a)
            FE_HOST=$OPTARG ;;
        ?)
            echo; usage; exit 1 ;;
    esac
done

shift $((OPTIND-1))
if [[ $# -gt 1 ]]; then
    usage
    exit 1
fi

##############################################################################
# Define the list of nodes to be used
##############################################################################

NUMBER_OF_NODES=${1:-0}
if [[ $NUMBER_OF_NODES -lt 0 ]]; then
    echo "Wrong number of nodes: $NUMBER_OF_NODES"
    exit 1
fi

case $(hostname -s) in
    "head")
        NODES_FILE=$TEST_DIR/nodes/quark.list
        ;;
    "claradm")
        echo "Running on claradm. Only the local front-end can be used."
        NODES_FILE=
        NUMBER_OF_NODES=0
        ;;
    *)
        echo "Running on local node. Only the local front-end can be used."
        FE_HOST=localhost
        NODES_FILE=
        NUMBER_OF_NODES=0
        ;;
esac

if [[ $NUMBER_OF_NODES -gt 0 ]]; then
    if [[ -z $NODES_FILE ]]; then
        echo "A file with the list of available nodes is required."
        echo "See nodes/quark.list as an example."
        echo
        usage
        exit 1
    fi
    echo "NODES_FILE=$NODES_FILE"
    IFS=$'\r\n' GLOBIGNORE='*' command eval "NODES=(localhost $(cat $NODES_FILE))"
else
    echo "Running everything on front-end node. No extra DPEs will be deployed."
    NODES=()
fi
echo "---"

##############################################################################
# Start from a clean session
##############################################################################

# Remove any existing tmux session first
$TEST_DIR/quit

cd $TEST_DIR
mkdir -p $TEST_DIR/log
rm -f $TEST_DIR/log/*

##############################################################################
# Start the FE and the DPEs
##############################################################################

function new_window()
{
    $TMUX new-window -d -t "$SESSION:$1" -n $2
    $TMUX setw -q -t "$SESSION:$1" pane-base-index 0
}

function split_window()
{
    for (( i=0; i<=$NUMBER_OF_NODES; i++ )); do
        $TMUX split-window -v -t "$SESSION:$1"
        $TMUX select-layout -t "$SESSION:$1" tiled
    done
}

function connect_nodes()
{
    for (( i=1; i<=$NUMBER_OF_NODES; i++ )); do
        $TMUX send-keys -t "$SESSION:$1.$i" " ssh ${NODES[$i]}" "C-m"
    done
}

function start_clara()
{
    $TMUX send-keys -R -t "$SESSION:$1.0" \
            " $TEST_DIR/lib/run-fe $CLARA_HOME $FE_HOST" "C-m"
    for (( i=1; i<=$NUMBER_OF_NODES; i++ )); do
        $TMUX send-keys -R -t "$SESSION:$1.$i" \
                " $TEST_DIR/lib/run-dpe $CLARA_HOME $FE_HOST" "C-m"
    done
}

function start_monitoring()
{
    for (( i=1; i<=$NUMBER_OF_NODES; i++ )); do
        $TMUX send-keys -R -t "$SESSION:$1.$i" \
                " ssh -t ${NODES[i]} $TEST_DIR/lib/monitor-dpe" "C-m"
    done
}


ORCH_PANE=$(($NUMBER_OF_NODES + 1))

$TMUX has-session -t "$SESSION" 2>/dev/null
if [[ "$?" -eq 1 ]]; then
    if [ -e ~/.tmux.conf ]; then
        $TMUX new-session -s "$SESSION" -n test -d
    else
        $TMUX -f $TEST_DIR/lib/tmux.conf new-session -s "$SESSION" -n test -d
    fi

    REC_WINDOW=1
    $TMUX setw -q -t "$SESSION:$REC_WINDOW" pane-base-index 0

    split_window $REC_WINDOW
    connect_nodes $REC_WINDOW
    start_clara $REC_WINDOW

    if [[ $MONITOR -eq 0 ]]; then
        MON_WINDOW=2
        new_window $MON_WINDOW monitor
        split_window $MON_WINDOW
        connect_nodes $MON_WINDOW
        start_monitoring $MON_WINDOW
    fi

    if [ $NUMBER_OF_NODES -eq 0 ]; then
        $TMUX send-keys -t "$SESSION:$REC_WINDOW.$ORCH_PANE" "./run-local"
    else
        $TMUX send-keys -t "$SESSION:$REC_WINDOW.$ORCH_PANE" "./run-cloud"
    fi
    $TMUX select-window -t "$SESSION:$REC_WINDOW"
    $TMUX select-pane -t "$SESSION:$REC_WINDOW.$ORCH_PANE"
fi

if [[ $KEEP_DETACHED -eq 1 ]]; then
    $TMUX -2 attach-session -t "$SESSION"
fi
