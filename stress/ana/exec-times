#!/usr/bin/env python

import argparse
import re
import yaml

tokens = []
times = {}


def nonblank_lines(f):
    r = '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}: '
    for line in f.readlines():
        l = re.sub(r, '', line.strip())
        if l:
            yield l


def parse_services(services_file):
    rec_chain = []
    with open(services_file) as f:
        data = yaml.safe_load(f)
        for service in data['services']:
            rec_chain.append(service['name'])

    global tokens
    tokens = ['READER'] + rec_chain + ['WRITER', 'TOTAL']
    for token in tokens:
        times[token] = []


def parse_time(log_file):
    with open(log_file) as f:
        for line in nonblank_lines(f):
            l = line.split()
            token = l[0]
            if token in times:
                t = l[-2]
                times[token].append(t)


def print_results():
    N = 3
    T = int(len(times['TOTAL']) / N)
    print('Cores;' + ';'.join(tokens))
    for n in range(T):
        l = '%d' % (n + 1)
        i = n * N
        for token in tokens:
            t = [float(v) for v in times[token][i:i+N]]
            a = sum(t) / N
            l += ';%.2f' % a
        print(l)


if __name__ == '__main__':

    argparser = argparse.ArgumentParser()
    argparser.add_argument('services_yaml', help='the services.yaml file')
    argparser.add_argument('log_file', help='the multicore-test output')
    args = argparser.parse_args()

    parse_services(args.services_yaml)
    parse_time(args.log_file)
    print_results()
