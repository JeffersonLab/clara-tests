#!/usr/bin/env python
# encoding: utf-8

import sys
import os

from optparse import OptionParser

parser = OptionParser(usage="usage: %prog [options] <results.csv>")
parser.add_option("-s",
                  action="store_true",
                  dest="show",
                  default=False,
                  help="show the plot")
parser.add_option("-n",
                  action="store_true",
                  dest="no_fig",
                  default=False,
                  help="do not save an output figure")
parser.add_option("-o",
                  action="store",
                  dest="figure",
                  help="set the name of the output PNG figure")
parser.add_option("-t",
                  action="store",
                  dest="title",
                  help="set the title of the plot")
options, args = parser.parse_args()

if len(args) != 1:
    parser.error("bad number of arguments")

results_file = args[0]

base_name = os.path.basename(results_file)
name = os.path.splitext(base_name)[0]

if options.title:
    title = options.title
else:
    title = name

if options.figure:
    output_fig = options.figure
else:
    output_fig = name + ".png"

cores = []
rates = []

with open(results_file) as f:
    for line in f:
        values = line.strip().split(";")
        if len(values) == 0:
            continue
        if len(values) != 4:
            print 'Bad formatted line: "%s"' % line.strip()
            sys.exit(1)
        num_cores = int(values[0])
        times = [float(i) for i in values[-3:]]
        avg_time = sum(times) / 3
        rate = 1 / avg_time
        cores.append(num_cores)
        rates.append(rate)


import matplotlib as mpl
if not options.show:
    mpl.use('Agg')
import matplotlib.pyplot as plt
import numpy as np

pl = np.polyfit(cores, rates, 1)
cr = np.corrcoef(cores, rates)[0, 1]
r2 = cr ** 2

print "y = %.4fx + %.4f" % (pl[0], pl[1])
print "R^2 = %.4f" % r2

polynomial = np.poly1d(pl)

plt.plot(cores, rates, 'ro')
plt.plot(cores, polynomial(cores))

plt.title(title)
plt.legend(["Data", "Fitted"], loc=0, borderaxespad=3.0)
plt.xlabel("Cores")
plt.ylabel("Event rate (kHz)")

text = r'$y = %.4fx + %.4f$'"\n"r'$R^2 = %.4f$' % (pl[0], pl[1], r2)
plt.text(0.6, 0.3, text, transform=plt.gca().transAxes)

if not options.no_fig:
    plt.savefig(output_fig)
    print
    print "Plot saved to", output_fig

if options.show:
    plt.show()
